knitr::opts_chunk$set(echo = TRUE)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
# source("https://bioconductor.org/biocLite.R")
# biocLite("scater")
# biocLite("SingleCellExperiment")
# sceset <- readRDS("../../preprocess_data/clean data/rds/SingleCellExperimentObject_sc01tosc13_afterQC.rds")
sceset <- readRDS("../rds/sce_cancerFT_afterQC.rds")
dim(sceset)
table(sceset$description)
knitr::opts_chunk$set(echo = TRUE)
# source("https://bioconductor.org/biocLite.R")
# biocLite("scater")
# biocLite("SingleCellExperiment")
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
kable(table(sceset$description))
library(knitr)
kable(table(sceset$description))
source("clincluster/clincluster_functions.R")
sceset@colData$source2 <- plyr::mapvalues(x = sceset$source, from = unique(sceset@colData$source), to = c("cryo","fresh","longC", "onC","longC"))
sceset <- sceset[,sceset$description == "cell"]
dim(sceset)
sceset@colData$source2 <- plyr::mapvalues(x = sceset$source, from = unique(sceset@colData$source), to = c("cryo","fresh","longC", "onC","longC"))
table(sceset@colData$source2)
unique(sceset@colData$source)
sceset <- PrepareData(sceset, col.for.cluster = "source2", do.scale = T)
sceset <- HighVarGenes(sceset, verbose = T, mean.high.cutoff = 6, mean.low.cutoff = 0.3, dispersion.low.cutoff = 1, dispersion.high.cutoff = 7.5)
table(rowData(sceset)$high.var)
df_plot <- data.frame(gene.mean = rowData(sceset)$gene.mean,
gene.dispersion.scaled = rowData(sceset)$gene.dispersion.scaled,
gene.dispersion = rowData(sceset)$gene.dispersion,
high.var = rowData(sceset)$high.var)
ggplot(data = df_plot , aes(x = gene.mean, y = gene.dispersion.scaled, col = high.var) ) +
geom_point(alpha=0.4) +  geom_hline(yintercept = 1, alpha = 0.5, col = "grey" ) +
geom_vline(xintercept = 0.3, alpha = 0.5, col = "grey" ) +
geom_vline(xintercept = 6, alpha = 0.5, col = "grey")
ggplot(data = df_plot, aes(x = gene.mean, y = gene.dispersion, col = high.var) ) +
geom_point(alpha=0.4)
library(cowplot)
knitr::opts_chunk$set(echo = TRUE)
# source("https://bioconductor.org/biocLite.R")
# biocLite("scater")
# biocLite("SingleCellExperiment")
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
library(knitr)
library(cowplot)
p2 <- ggplot(data = df_plot, aes(x = gene.mean, y = gene.dispersion, col = high.var) ) +
geom_point(alpha=0.4)
plot_grid(p1,p2, labels = "AUTO")
p1 <- ggplot(data = df_plot , aes(x = gene.mean, y = gene.dispersion.scaled, col = high.var) ) +
geom_point(alpha=0.4) +  geom_hline(yintercept = 1, alpha = 0.5, col = "grey" ) +
geom_vline(xintercept = 0.3, alpha = 0.5, col = "grey" ) +
geom_vline(xintercept = 6, alpha = 0.5, col = "grey")
plot_grid(p1,p2, labels = "AUTO")
set.seed(12345)
sceset <- runTSNE(object = sceset, ncomponents = 2, feature_set = rownames(sceset)[rowData(sceset)$high.var],
exprs_values = "logcounts",
perplexity = min(50, floor(ncol(sceset)/5)))
knitr::opts_chunk$set(echo = TRUE, fig.w)
knitr::opts_chunk$set(echo = TRUE, fig.width = 10)
# source("https://bioconductor.org/biocLite.R")
# biocLite("scater")
# biocLite("SingleCellExperiment")
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
library(knitr)
library(cowplot)
plotTSNE(sceset)
p1 <- plotTSNE(sceset, colour_by = "source")
p2 <- plotTSNE(sceset, colour_by = "Patient2")
cowplot::plot_grid(p1,p2)
p1 <- plotTSNE(sceset, colour_by = "source")
p2 <- plotTSNE(sceset, colour_by = "Patient2")
plot_grid(p1,p2,labels = "AUTO")
sceset <- runPCA(object = sceset, ncomponents = 20, exprs_values = "logcounts", rand_seed = 12345,
feature_set = rownames(sceset)[rowData(sceset)$high.var == TRUE])
plot(1:20, attr(sceset@reducedDims$PCA, "percentVar")[1:20])
plot(1:20, attr(sceset@reducedDims$PCA, "percentVar")[1:20])
table(sceset$group.for.cluster)
kable(table(sceset$group.for.cluster))
sceset <- InitialCluster(sceset, k = 6, ncomponents = 1:12, n.neighbor = 7)
plotTSNE(sceset, colour_by = "initial.cluster")
p1 <- plotTSNE(sceset[,sceset$source2 == "fresh"], colour_by = "initial.cluster")
p2 <- plotTSNE(sceset[,sceset$source2 == "cryo"], colour_by = "initial.cluster")
p3 <- plotTSNE(sceset[,sceset$source2 == "longC"], colour_by = "initial.cluster")
p4 <- plotTSNE(sceset[,sceset$source2 == "onC"], colour_by = "initial.cluster")
cowplot::plot_grid(p1,p2,p3,p4)
matrix <- expm1(logcounts(sceset))
keep <- rowSums(matrix > 1) > 5
sum(keep)
dge <- edgeR::DGEList(counts = matrix[keep,]) # make a edgeR object
rm(matrix,keep)
sceset@colData$initial.cluster <- gsub(pattern = " ", replacement = "_", x = sceset@colData$initial.cluster)
sceset@colData$initial.cluster <- gsub(pattern = "-", replacement = "_", x = sceset@colData$initial.cluster)
design <- model.matrix(~  0 + initial.cluster, data = sceset@colData)  # Use 0 because we do not need intercept for this linear model
colnames(design)
v <- voom(dge, design, plot = F)
fit <- lmFit(v, design)
initial.clusters <- colnames(design)
nc <- ncol(design)
## Automating makeContrasts call in limma
contrast_all <- gtools::permutations(v = initial.clusters, n = nc, r = 2)
contrast_all <- apply(contrast_all, MARGIN = 1, function(x) return(paste(x[1],"-",x[2], sep = "")))
cont.matrix <- makeContrasts(contrasts = contrast_all,
levels=design)
fit2 <- contrasts.fit(fit, cont.matrix)
fit2 <- eBayes(fit2)
n_deg <- matrix(0, ncol = nc, nrow = nc)  # number of DE genes
colnames(n_deg) <- rownames(n_deg) <- gsub(x = colnames(design)[1:nc], pattern = "initial.cluster",replacement = "")
logcount <- logcounts(sceset)[rownames(sceset) %in% rownames(dge),]
for(i in 1:(nc-1)) {
for(j in (i+1):nc) {
if(i == j) {
n_deg[i,j] <- 0
} else if (j < i) {
coef_k = (i-1)*(nc-1)+j
} else if (j > i) {
coef_k = (i-1)*(nc-1)+j-1
}
if(i != j) {
rls <- topTable(fit2, n = Inf, coef = coef_k, sort = "p", lfc = 0.6, p = 0.05 )
if(nrow(rls) > 1) {
v_expr <- logcount[match(rownames(rls),rownames(logcount)), sceset$initial.cluster == rownames(n_deg)[i]]
rls$ratio1 <- rowSums(v_expr > 0.5)/ncol(v_expr)
v_expr <- logcount[match(rownames(rls),rownames(logcount)), sceset$initial.cluster == colnames(n_deg)[j]]
rls$ratio2 <- rowSums(v_expr > 0.5)/ncol(v_expr)
rls$ratiomax <- rowMaxs(as.matrix(rls[,c("ratio1", "ratio2")]))
rls$ratiomin <- rowMins(as.matrix(rls[,c("ratio1", "ratio2")]))
rls <- rls[rls$ratiomax > 0.25, ]
n_deg[i,j] <- sum(apply(rls, MARGIN = 1, function(x) return(abs(x[1]) * (x[9]+0.01)/(x[10]+0.01)))) ## 0.01 is used here to enhance the differences of on-off genes
} else if (nrow(rls) == 1) {
n_deg[i,j] <- sum(rls$logFC)
}
## This eqaution take fold change and expression ratio into account
}
}
}
n_deg <- n_deg + t(n_deg)
p1 <- plotTSNE(sceset[,sceset$source2 == "fresh"], colour_by = "initial.cluster")
p2 <- plotTSNE(sceset[,sceset$source2 == "cryo"], colour_by = "initial.cluster")
p3 <- plotTSNE(sceset[,sceset$source2 == "longC"], colour_by = "initial.cluster")
p4 <- plotTSNE(sceset[,sceset$source2 == "onC"], colour_by = "initial.cluster")
cowplot::plot_grid(p1,p2,p3,p4)
hc <- hclust(as.dist(n_deg))
plot(hc); rect.hclust(hc, k = 12, border = "red")
plot(hc); rect.hclust(hc, k = 12, border = "red")
hc.cluster <- cutree(hc, k = 12)
colData(sceset)$clincluster <- hc.cluster[match(colData(sceset)$initial.cluster, names(hc.cluster))]
colData(sceset)$clincluster <- as.factor(colData(sceset)$clincluster)
table(colData(sceset)$clincluster )
plotTSNE(sceset,  colour_by = "clincluster")
table(sceset$source2, sceset$clincluster)
matrix <- expm1(logcounts(sceset))
keep <- rowSums(matrix > 1) > 5
dge <- edgeR::DGEList(counts = matrix[keep,]) # make a edgeR object
logcount <- logcounts(sceset)[rownames(sceset) %in% rownames(dge),]
markers <- c()
pb <- txtProgressBar(min = 0, max =  (length(unique(sceset$clincluster))), style = 3)
for(i in 1:length(unique(sceset$clincluster))){
info <- rep("control", ncol(sceset))
info[sceset$clincluster == i] <- "group"
design <- model.matrix(~ 0 + info)
v <- voom(dge, design, plot = F)
fit <- lmFit(v, design) # Linear Model for Series of Arrays
cont.matrix <- makeContrasts(contrasts = "infogroup-infocontrol",levels=design)
fit <- contrasts.fit(fit, cont.matrix ) # Linear Model for Series of Arrays
fit <- eBayes(fit)
marker <- topTable(fit, p.value = 0.05, number = Inf, coef = 1, lfc = 0.6, sort.by = "logFC")
marker <- marker[marker$logFC > 0.6,]
v_expr <- logcount[match(rownames(marker),rownames(logcount)), info == "group"]
marker$ratio1 <- rowSums(v_expr > 0.5)/ncol(v_expr)
v_expr <- logcount[match(rownames(marker),rownames(logcount)),info != "group"]
marker$ratio2 <- rowSums(v_expr > 0.5)/ncol(v_expr)
marker$gene <- rownames(marker)
marker$cluster <- i
markers  <- rbind(markers, marker)
setTxtProgressBar(pb, i)
}
markers <- markers[rowMaxs(as.matrix(markers[,c("ratio1","ratio2")])) > 0.4,]
expm1(logcounts(sceset))["GAPDH",1:10]
counts(sceset)["GAPDH",1:10]
exp(logcounts(sceset))["GAPDH",1:10]/exp(10)
exp(logcounts(sceset))["GAPDH",1:10]/exp(2)
exp(2)
cpm <- calculateCPM(sceset)
cpm["GAPDH",1:10]
expm1(logcounts(sceset))["GAPDH",1:10]
exp(log(2))
expm1(log1p(2))
current.cluster.ids <- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ,12)
new.cluster.ids <- c("Leukocyte",
"Cultured ciliated",
"O.N. cultured FTESCs",
"Cultured ciliated",
"O.N. cultured FTESCs",
"Stromal cells",
"Fresh FTESCs",
"Fresh FTESCs",
"Fresh ciliated",
"Long cultured FTESCs 2",
"Long cultured FTESCs 1",
"O.N. cultured FTESCs")
sceset$ident <- plyr::mapvalues(x = sceset$clincluster, from = current.cluster.ids, to = new.cluster.ids)
sceset$ident <- factor(sceset$ident,
levels = c("Fresh FTESCs",
"Fresh ciliated",
"O.N. cultured FTESCs",
"Cultured ciliated",
"Long cultured FTESCs 1",
"Long cultured FTESCs 2",
"Leukocyte",
"Stromal cells"))
sceset$sources <- sceset$source
sceset$sources[sceset$sources %in% c("2-day cultured", "6-day cultured")] <- "Long cultured"
sceset$sources <- factor(sceset$sources, levels = c("Fresh","O.N. cultured","cryopreserved",
"Long cultured"))
plotTSNE(object = sceset,  colour_by = "ident")
plotTSNE(object = sceset,  colour_by = "Patient2")
# ggsave("../manuscript_plots/Figure1_0917_tSNE_Patient.tiff", width = 5, height = 4, units = "in")
# # Figure S1A----
# tiff("../manuscript_plots/FigureS1A_tsne.tiff", res = 300, width = 7, height = 5.5, units = "in")
plotTSNE(sceset,  colour_by = "Patient2")
fresh <- sceset[,sceset$source == "Fresh"]
fresh$type <- "Secretory"
fresh$type[fresh$ident == "Fresh ciliated"] <- "Ciliated"
plotExpression(fresh, x = "type", features = c("KRT7","PAX8"), ncol = 5,xlab = "Cell type")  + theme(strip.text = element_text(size = 12, face = "italic") )
# ggsave("plots/SuppFig1H_secretory_markers.png", height = 2, width = 3.5)
plotExpression(fresh, x = "type", features = c("KRT7","PAX8"), ncol = 5,xlab = "Cell type")  + theme(strip.text = element_text(size = 12, face = "italic") )
plotExpression(fresh, x = "type", features = c("CCDC17","CCDC78","CAPS","FOXJ1"), ncol = 5,xlab = "Cell type")  + theme(strip.text = element_text(size = 12, face = "italic") )
usethis::use_git()
