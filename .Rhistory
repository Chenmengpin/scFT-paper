seurat <- readRDS("../../scFT-paper_rds/20190508Seurat_all_fresh_doublefinder.rds")
seurat@meta.data$DF_hi.lo <- seurat@meta.data$DF.classifications_0.25_0.07_25
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet" & seurat@meta.data$DF.classifications_0.25_0.07_21 == "Singlet")] <- "Doublet_lo"
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet")] <- "Doublet_hi"
TSNEPlot(seurat, group.by="DF_hi.lo", plot.order=c("Doublet_hi","Doublet_lo","Singlet"), colors.use=c("black","gold","red"))
seurat@meta.data$cell_type <- NA
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
fresh <- sceset[,sceset$source == "Fresh"]
fresh$cell_type <- NA
fresh$cell_type[colnames(fresh) %in% colnames(sceset)[sceset$final.clusters == 11]] <- "Ciliated"
fresh$cell_type[colnames(fresh) %in% colnames(secretory)] <- "Secretory"
table(fresh$cell_type)
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
seurat@meta.data$cell_subtype <- secretory$cell_type[match(rownames(seurat@meta.data), colnames(secretory))]
table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
seurat@meta.data$DF_hi.lo
rownames(seurat@meta.data)
match(rownames(seurat@meta.data), colnames(secretory))
seurat@meta.data$cell_subtype <- secretory$cell_type[match(rownames(seurat@meta.data), colnames(secretory))]
table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
# table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
secretory$DF_hi.lo <- seurat@meta.data$DF_hi.lo[match(colnames(secretory), rownames(seurat@meta.data))]
table(secretory$DF_hi.lo, secretory$cell_type)
length(secretory$DF_hi.lo)
length(secretory$cell_type)
secretory$clincluster_final
table(secretory$DF_hi.lo, secretory$clincluster_final)
knitr::kable(table(secretory$DF_hi.lo, secretory$clincluster_final))
knitr::kable(table(secretory$DF_hi.lo[secretory$clincluster_final == "C8"]))
plotTSNE(fresh)
fresh$cell_type
table(fresh$cell_type)
plotTSNE(as.SingleCellExperiment(seurat))
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "cell_subtype")
seurat@meta.data$cell_subtype <- secretory$clincluster_final[match(rownames(seurat@meta.data), colnames(secretory))]
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "cell_subtype")
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "batch")
knitr::opts_chunk$set(echo = TRUE, cache = FALSE, fig.width = 6, fig.height = 4)
# devtools::install_github('shenorrlab/bseq-sc')
library(bseqsc)
library(MASS)
library(xbioc)
library(e1071) #svm
library(preprocessCore)
library(survminer)
library(survival)
library(powerSurvEpi)
library(survminer)
library(Biobase)
library(SingleCellExperiment)
library(scater)
library(ggbeeswarm)
library(ggrepel)
library(viridis)
library(edgeR)
library(limma)
# library(copynumber)
library(ggplot2)
library(RColorBrewer)
source("../../scFT-paper_hmtlReports/modified_functions20190204.R")
source("../../scFT-paper_other/modified_functions20190204.R")
secretory <- readRDS("../../scFT-paper_rds/20190120Fresh_secretory_9clusters_clincluster.rds")
sceset <- readRDS("../../scFT-paper_rds/20180917Sceset_12clusters.rds")
markers2 <- read.csv("../../scFT-paper_rds/20190120Clincluster_fresh_secretory_9clusters_markers.csv", row.names = 1, as.is = T)
markers_sceset <- read.csv("../../scFT-paper_rds/20180917sceset_markers_12cluster-Zhiyuanâ€™s iMac.csv", row.names = 1, as.is = T)
fresh <- sceset[,sceset$source == "Fresh"]
# rm(secretory)
rm(sceset)
load("../../scFT-paper_rds/20191125background_deconvolution_scRNAseqData.rdata")
marker.C3 <- markers2[markers2$cluster == "C3" & markers2$logFC > 1.79, ]
marker.C4 <- markers2[markers2$cluster == "C4" & markers2$logFC > 1.5 & markers2$ratio2 < 0.3,]
marker.EMT <- markers2[markers2$cluster == "C8" & markers2$logFC > 2 & markers2$ratio2 < 0.2,]
marker.C10 <- markers2[markers2$cluster == "C10" & markers2$logFC > 2.5 & markers2$ratio2 < 0.2,]
marker.ciliated <- markers_sceset[markers_sceset$cluster == 9 & markers_sceset$logFC > 6 & markers_sceset$ratio2 < 0.1,]
markers <- list(C3 = marker.C3$gene,
C4 = marker.C4$gene,
EMT = marker.EMT$gene,
C10 = marker.C10$gene,
ciliated = marker.ciliated$gene)
fresheset <- ExpressionSet(assayData = as.matrix(counts(fresh)),
phenoData = new("AnnotatedDataFrame",
data=as.data.frame(fresh@colData)))
fresheset$cell.type <- NA
fresheset$cell.type[fresheset$Sample %in% secretory$Sample[secretory$clincluster_final == "C3"]] <- "C3" # differentiated
fresheset$cell.type[fresheset$Sample %in% secretory$Sample[secretory$clincluster_final == "C4"]] <- "C4" # KRT17 cluster
fresheset$cell.type[fresheset$Sample %in% secretory$Sample[secretory$clincluster_final == "C8"]] <- "EMT"
fresheset$cell.type[fresheset$Sample %in% secretory$Sample[secretory$clincluster_final == "C10"]] <- "C10" # cell cycle clusters
fresheset$cell.type[fresheset$clincluster == 9] <- "ciliated"
fresheset <- fresheset[,!is.na(fresheset$cell.type)]
table(fresheset$cell.type)
fresh <- fresh[,match(colnames(fresheset), colnames(fresh))]
fresh$cell.type <- fresheset$cell.type
load("../../scFT-paper_rds/bulkExprData_forDeconvolution20191125.rdata")
toteset$summarystage <- NA
toteset$summarystage[toteset$Stage %in% c("I","IA",  "IB" , "IC",  "IIA", "IIB" ,"IIC")] <- "early"
toteset$summarystage[toteset$Stage %in% c("III",  "IIIA", "IIIB", "IIIC", "IV" )] <- "late"
toteset$summarygrade <- NA
toteset$summarygrade[toteset$Grade %in% c(1)] <- "low"
toteset$summarygrade[toteset$Grade %in% c(2,3)] <- "high"
# we removed the marker genes with little dispersion in the bulk RNAseq data
pca_emt <- function(markers){
markers_in <- intersect(markers, rownames(tcga))
exprs_mat <- logcounts(tcga)[match(markers_in, rownames(tcga)), ,drop = F]
## scale
exprs_mat <- t(exprs_mat)
vars <- DelayedMatrixStats::colVars(DelayedArray(exprs_mat))
exprs_mat <- sweep(exprs_mat, MARGIN=2, # We scale by the standard deviation, which also changes the centre.
STATS=sqrt(vars), FUN="/",
check.margin=FALSE) # divide by the square root of vars
## PCA
pca <- prcomp(exprs_mat)
emt_w <- pca$rotation[,1]
emt_w <- emt_w[order(emt_w, decreasing = T)]
emt_w
}
## genes with too good correlations can go (i.e. cor > 0.8)
# cor(t(log1p(exprs_tcga)[new_markers$EMT,]))
new_markers <- list()
# new_markers$progenitor <- markers$progenitor
out <- pca_emt(markers = markers$C3)
new_markers$C3 <- names(out)[abs(out) > 0.2]
out <- pca_emt(markers = markers$C4)
new_markers$C4 <- names(out)[abs(out) > 0.2]
out <- pca_emt(markers = markers$EMT)
new_markers$EMT <- names(out)[abs(out) > 0.2]
# cor(t(log1p(exprs_tcga)[new_markers$EMT,]))
out <- pca_emt(markers = markers$C10)
new_markers$C10 <- names(out)[abs(out) > 0.2]
out <- pca_emt(markers = markers$ciliated)
new_markers$ciliated <- names(out)[abs(out) > 0.2]
new_markers$ciliated <- new_markers$ciliated[c(1,2,3,8,9,10,13,14)] # remove redundant genes by cor > 0.8
# str(new_markers)
length(unlist(new_markers))
lapply(new_markers, length)
sig_matrix_new <- bseq_my(markers = new_markers)
## upper limit
quantile(sig_matrix_new, 0.99)
sig_matrix_new[sig_matrix_new > quantile(sig_matrix_new, 0.99)] <- quantile(sig_matrix_new, 0.99) # average the too high value
gc()
rm(fresh)
rm(fresheset)
esets <- readRDS("../../scFT-paper_rds/20190213CuratedOvarianData_esets.rds")
svr_fit <- list() # record cibersort results
fit <- list() # survival analysis results
esets_tumor <- list()
# go through all the datasets, run cibersort
for(itor in 1:length(esets)) {
## tumor data/remove the benign or borderline samples
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
## deconvolution
if(max(na.omit(eset_tmp@assayData$exprs)) < 50) { ## if log-space, unlog it
svr_fit[[itor]] <- cibersort_my(sig_matrix = sig_matrix_new,
exprs_unlogged = exp(na.omit(eset_tmp@assayData$exprs)))
} else {         # non-log space
svr_fit[[itor]] <- cibersort_my(sig_matrix = sig_matrix_new,
exprs_unlogged = eset_tmp@assayData$exprs)
}
}
itor=1
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
eset_tmp <- eset_tmp[,eset_tmp$summarystage == "late"]
fit[[itor]] <- coxph(y~emt, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=2
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
fit[[itor]] <- coxph(y~emt+summarygrade, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=3
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
eset_tmp <- eset_tmp[,eset_tmp$histological_type=="ser"]
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
# early  late
#    17    62
fit[[itor]] <- coxph(y~emt+summarygrade+summarystage, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=4
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
# eset_tmp <- eset_tmp[,eset_tmp$histological_type=="ser"]
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
# late
#  185
fit[[itor]] <- coxph(y~emt, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=5
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
# eset_tmp <- eset_tmp[,eset_tmp$histological_type=="ser"]
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
# late
#  260
fit[[itor]] <- coxph(y~emt+summarygrade, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=6
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
eset_tmp <- eset_tmp[,eset_tmp$histological_type=="ser"]
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
# early  late
#     5   166
fit[[itor]] <- coxph(y~emt+summarygrade+ summarystage, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
#####
itor=7
eset_tmp <- esets[[itor]][,esets[[itor]]$sample_type %in% c("tumor","metastatic")]
# # survival data
eset_tmp$y <- Surv(eset_tmp$days_to_death,
eset_tmp$vital_status == "deceased")
eset_tmp$emt <- svr_fit[[itor]][,"EMT"]
eset_tmp <- eset_tmp[,!is.na(eset_tmp$days_to_death)]
table(eset_tmp$sample_type)
table(eset_tmp$histological_type)
eset_tmp <- eset_tmp[,eset_tmp$histological_type=="ser"]
table(eset_tmp$summarygrade)
table(eset_tmp$summarystage)
# early  late
#     5   108
fit[[itor]] <- coxph(y~emt+summarygrade+summarystage, eset_tmp)
esets_tumor[[itor]] <- eset_tmp
df <- matrix(NA, nrow = 7, ncol = 6)
colnames(df) <- c("nsamples","nevent","hazard_ratio","pvalue","lower.CI95","upper.CI95")
df <- as.data.frame(df)
for(itor in 1:7){
df$lower.CI95[itor] <- summary(fit[[itor]])$conf.int[1,3]
df$upper.CI95[itor] <- summary(fit[[itor]])$conf.int[1,4]
df$hazard_ratio[itor] <- summary(fit[[itor]])$conf.int[1,1]
df$pvalue[itor] <- summary(fit[[itor]])$coefficient[1,5]
df$nsamples[itor] <- summary(fit[[itor]])$n
df$nevent[itor] <- summary(fit[[itor]])$nevent
}
df$database <- c("E.MTAB.386", "GSE13876", "GSE26193",
"GSE26712", "GSE32062.GPL6480",
"GSE49997", "GSE51088")
# write.csv(df, "../revision_tables/20191009CuratedOvarianData_results_multivariable_test.csv", row.names = F)
## IC95 error bar plot----
df <- df[order(df$hazard_ratio, decreasing = T),]
df <- df[!grepl("TCGA",df$database),]
ggplot(df[which(df$nsamples > 100),], aes(y = database, x = hazard_ratio))+ geom_point(shape=21, fill = "black",size=4) +
geom_errorbarh(aes(xmax = upper.CI95, xmin = lower.CI95), height=0.2, size=1) + theme_survminer() +xlim(c(0, 10)) +
geom_vline(xintercept = 1, lty = 3, col = "black") + xlab("Hazard ratio") +ylab("")
# ggsave("plots_explore/20190213Hazard_ratio_CI95_CuratedOvarianData.png",width = 5, height = 6)
knitr::kable(df)
## put all datasets together
esets_tumor[[6]] <- esets_tumor[[6]][,!is.na(esets_tumor[[6]]$alt_sample_name)]
df_all <- data.frame(database = c(rep("E.MTAB.386",ncol(esets_tumor[[1]])),
rep("GSE13876",ncol(esets_tumor[[2]])),
rep("GSE26193",ncol(esets_tumor[[3]])),
rep("GSE26712",ncol(esets_tumor[[4]])),
rep("GSE32062.GPL6480",ncol(esets_tumor[[5]])),
rep("GSE49997",ncol(esets_tumor[[6]])),
rep("GSE51088",ncol(esets_tumor[[7]])),
rep("AOCS", ncol(toteset)),
rep("TCGA", ncol(eset))),
sample_type = c(esets_tumor[[1]]$sample_type,esets_tumor[[2]]$sample_type,
esets_tumor[[3]]$sample_type,esets_tumor[[4]]$sample_type,
esets_tumor[[5]]$sample_type,esets_tumor[[6]]$sample_type,
esets_tumor[[7]]$sample_type, rep("tumor",ncol(toteset)),
rep("tumor", ncol(eset))),
grade = c(esets_tumor[[1]]$summarygrade,esets_tumor[[2]]$summarygrade,
esets_tumor[[3]]$summarygrade,esets_tumor[[4]]$summarygrade,
esets_tumor[[5]]$summarygrade,
esets_tumor[[6]]$summarygrade,esets_tumor[[7]]$summarygrade,
toteset$summarygrade,
rep("high", ncol(eset))),
stage = c(esets_tumor[[1]]$summarystage,esets_tumor[[2]]$summarystage,
esets_tumor[[3]]$summarystage,esets_tumor[[4]]$summarystage,
esets_tumor[[5]]$summarystage,
esets_tumor[[6]]$summarystage,esets_tumor[[7]]$summarystage,
toteset$summarystage,
eset$stage_dichotomized),
histological_type = c(esets_tumor[[1]]$histological_type,esets_tumor[[2]]$histological_type,
esets_tumor[[3]]$histological_type,esets_tumor[[4]]$histological_type,
esets_tumor[[5]]$histological_type,esets_tumor[[6]]$histological_type,
esets_tumor[[7]]$histological_type, tolower(toteset$histological.subtype),
rep("ser", ncol(eset)))
)
toteset$vital_status <- NA
toteset$vital_status[toteset$patient.status != "D"] <- "living"
toteset$vital_status[toteset$patient.status == "D"] <- "deceased"
df_all$OS <- c(esets_tumor[[1]]$vital_status,esets_tumor[[2]]$vital_status,
esets_tumor[[3]]$vital_status,esets_tumor[[4]]$vital_status,
esets_tumor[[5]]$vital_status,esets_tumor[[6]]$vital_status,
esets_tumor[[7]]$vital_status,toteset$vital_status, tolower(eset$vital_status)
)
df_all$days_to_death <- c(esets_tumor[[1]]$days_to_death,esets_tumor[[2]]$days_to_death,
esets_tumor[[3]]$days_to_death,esets_tumor[[4]]$days_to_death,
esets_tumor[[5]]$days_to_death,esets_tumor[[6]]$days_to_death,
esets_tumor[[7]]$days_to_death,
toteset$time.to.death*30,
eset$OS.time)
# df_all <- df_all[df_all$sample_type %in% c("metastatic","tumor"),]
df_all$EMT <- c( esets_tumor[[1]]$emt, esets_tumor[[2]]$emt,
esets_tumor[[3]]$emt,  esets_tumor[[4]]$emt,
esets_tumor[[5]]$emt, esets_tumor[[6]]$emt,
esets_tumor[[7]]$emt,
toteset$emt.new, eset$EMT)
knitr::opts_chunk$set(echo = TRUE)
library(edgeR)
library(limma)
dge <- DGEList(counts=eset@assayData$exprs[,eset$emt_strata %in% c("Low","High")])
A <- rowSums(dge$counts) # filter genes
dge <- dge[A > 10,, keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge)
group <- eset$emt_strata[ eset$emt_strata %in% c("Low","High")]
design <- model.matrix(~0+group) # model by EMT groups
eset$emt_strata
eset$emt_new
eset$emt
eset <- readRDS("../../scFT-paper_rds/20191009_esetTCGA_afterDeconvolution.rds")
dge <- DGEList(counts=eset@assayData$exprs[,eset$emt_strata %in% c("Low","High")])
A <- rowSums(dge$counts) # filter genes
dge <- dge[A > 10,, keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge)
eset$emt_strata
eset$emt_strata
eset$emt_new
eset$emt_strata <- NA
eset$emt_strata[eset$emt_new >= quantile(eset$emt_new, 2/3)] <- "High"
eset$emt_strata[eset$emt_new <= quantile(eset$emt_new, 1/3)] <- "Low"
eset$emt_strata <- factor(eset$emt_strata, levels = c("Low","High"))
group <- eset$emt_strata[ eset$emt_strata %in% c("Low","High")]
design <- model.matrix(~0+group) # model by EMT groups
# limma
v <- voom(dge, design, plot=TRUE)
dim(dge)
eset$emt_strata <- NA
eset$emt_strata[eset$emt_new >= quantile(eset$emt_new, 2/3)] <- "High"
eset$emt_strata[eset$emt_new <= quantile(eset$emt_new, 1/3)] <- "Low"
eset$emt_strata <- factor(eset$emt_strata, levels = c("Low","High"))
dge <- DGEList(counts=eset@assayData$exprs[,eset$emt_strata %in% c("Low","High")])
A <- rowSums(dge$counts) # filter genes
dge <- dge[A > 10,, keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge)
group <- eset$emt_strata[ eset$emt_strata %in% c("Low","High")]
design <- model.matrix(~0+group) # model by EMT groups
# limma
v <- voom(dge, design, plot=TRUE)
fit <- lmFit(v, design)
cont.matrix <- makeContrasts(groupHigh-groupLow,
levels = design)
fit <- contrasts.fit(fit, cont.matrix)
fit <- eBayes(fit)
marker_EMThigh <- topTable(fit,number = Inf, p.value = 0.05, lfc = 1, coef = 1)
marker_EMThigh$gene <- rownames(marker_EMThigh)
marker_EMThigh <- marker_EMThigh[order(marker_EMThigh$logFC, decreasing = T),]
head(marker_EMThigh)
# write.csv(marker_EMThigh[marker_EMThigh$logFC >= 1,],"results/TableS7_markers_EMThigh20190215.csv")
# write.csv(marker_EMThigh,"../other_plots/markers_EMThigh20191008.csv")
knitr::kable(head(marker_EMThigh))
df_plot <- data.frame(exprs = c(eset@assayData$exprs["TWIST1",],eset@assayData$exprs["TWIST2",],eset@assayData$exprs["SNAI2",]),
group = rep(eset$emt_strata,3),
gene = rep(c("TWIST1","TWIST2","SNAI2"), each = ncol(eset)))
df_plot <- na.omit(df_plot)
df_plot$exprs <- log1p(df_plot$exprs)
df_plot$group <- paste("EMT-", df_plot$group, sep = "")
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_jitter(shape=16, alpha = 0.6, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
# ggsave("plots/Fig4_TWIST_SNAI2_violin20190215.png", width = 6, height = 4)
# ggsave("plots/Fig4_TWIST_SNAI2_violin20190215.pdf", width = 6, height = 3)
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_jitter(shape=16, alpha = 0.6, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
mirna <- read.delim("../../scFT-paper_rds/TCGA/Xena/miRNA/OV-TP.membership.txt", as.is = T)
eset$miRNA_cluster <- mirna$membership.1[match(colnames(eset), rownames(mirna))]
ggplot(pData(eset)[!is.na(eset$miRNA_cluster),], aes(x = as.factor(miRNA_cluster), y = emt_new)) + geom_violin() + theme_classic() + geom_hline(yintercept = quantile(eset$emt_new,1/3), lty = 2) + geom_hline(yintercept = quantile(eset$emt_new,2/3), lty = 2) + geom_jitter(shape=16, alpha = 0.6, position=position_jitter(0.2), aes(col = emt_group)) + xlab("miRNA clusters")
eset$emt_group <- NA
eset$emt_group[eset$emt_new > 0.1] <- "High"
eset$emt_group[eset$emt_new < 0.1] <- "Low"
ggplot(pData(eset)[!is.na(eset$miRNA_cluster),], aes(x = as.factor(miRNA_cluster), y = emt_new)) + geom_violin() + theme_classic() + geom_hline(yintercept = quantile(eset$emt_new,1/3), lty = 2) + geom_hline(yintercept = quantile(eset$emt_new,2/3), lty = 2) + geom_jitter(shape=16, alpha = 0.6, position=position_jitter(0.2), aes(col = emt_group)) + xlab("miRNA clusters")
table(eset$miRNA_cluster, eset$emt_strata)
t.test(eset$emt_new[eset$miRNA_cluster == 1], eset$emt_new[eset$miRNA_cluster > 1])
table(eset$miRNA_cluster, eset$emt_strata)
c
t.test(eset$emt_new[eset$miRNA_cluster == 1], eset$emt_new[eset$miRNA_cluster > 1])
miRNA <- read.delim("../../scFT-paper_rds/TCGA/Xena/miRNA/gdac.broadinstitute.org_OV.Merge_mirnaseq__illuminahiseq_mirnaseq__bcgsc_ca__Level_3__miR_gene_expression__data.Level_3.2016012800.0.0/OV.mirnaseq__illuminahiseq_mirnaseq__bcgsc_ca__Level_3__miR_gene_expression__data.data.txt", sep = "\t",row.names = 1,as.is = T)
# rownames(miRNA) <- miRNA[,1]
miRNA <- miRNA[,miRNA[1,] == "read_count"]
colnames(miRNA) <- gsub(pattern = "[.]", replacement = "-", x = colnames(miRNA))
colnames(miRNA) <- substr(colnames(miRNA), start = 1, stop = 15)
miRNA <- miRNA[,na.omit(match(colnames(eset), colnames(miRNA)))]
miRNA <- miRNA[-1,]
for(itor in 1:ncol(miRNA)){ ## transfer it to numeric
miRNA[,itor] <- as.numeric(miRNA[,itor])
}
group <- eset$emt_strata[match(colnames(miRNA), colnames(eset))]
dge <- DGEList(counts=miRNA[,!is.na(group)])
A <- rowSums(dge$counts) # filter genes
dge <- dge[A > 10,, keep.lib.sizes=FALSE]
dge <- calcNormFactors(dge)
group <- na.omit(group)
design <- model.matrix(~0+group) # model by EMT groups
# limma
v <- voom(dge, design, plot=TRUE)
fit <- lmFit(v, design)
cont.matrix <- makeContrasts(groupHigh-groupLow, levels = design)
fit <- contrasts.fit(fit, cont.matrix)
fit <- eBayes(fit)
de_genes <- topTable(fit, number = Inf, p.value = 0.05)
de_genes$gene <- rownames(de_genes)
de_genes <- de_genes[order(de_genes$logFC, decreasing = T),]
head(de_genes)
knitr::kable(head(de_genes))
## http://bioinformatics.knowledgeblog.org/2011/06/21/volcano-plots-of-microarray-data/
tt <- topTable(fit, number = Inf)
tt$names <- gsub(rownames(tt), pattern = "hsa-mir", replacement = "miR")
##Highlight genes that have an absolute fold change > 2 and a p-value < Bonferroni cut-off
tt$threshold <- as.factor(abs(tt$logFC) > 0.5 & tt$adj.P.Val < 0.05)
tt$threshold2 <- as.factor(abs(tt$logFC) > 1.5 & tt$adj.P.Val < 0.001)
tt$threshold2[tt$names %in% c("miR-200a","miR-200b","miR-200c","miR-141","miR-429")] <- T
tt$threshold2[tt$names %in% c("miR-514-2","miR-514-3","miR-509-2","miR-509-3")] <- F
##Construct the plot object
ggplot(data=tt, aes(x=logFC, y=-log10(P.Value), colour=paste(threshold, threshold2))) +
geom_point(alpha=0.4, size=1.75) +
xlim(c(-3, 3)) + ylim(c(0, 13)) +
xlab("log2 fold change") + ylab("-log10 p-value")+
geom_text_repel(data = tt[tt$threshold2 == TRUE,],aes(x = logFC, y=-log10(P.Value),label=names) , colour="black", alpha = 0.75) + theme_pubr() + theme(legend.position = "none")
# ggsave("plots/Fig_miRNA_volcano_plot20190215.png", width = 5, height = 4)
knitr::opts_chunk$set(echo = TRUE, cache = F)
library(edgeR)
library(limma)
library(ggplot2)
library(ggrepel)
library(ggpubr)
eset <- readRDS("../../scFT-paper_rds/20191009_esetTCGA_afterDeconvolution.rds")
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_boxplot(width  = 0.1) +
geom_jitter(shape=16, alpha = 0.6, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_boxplot(width  = 0.1) +
geom_jitter(shape=16, alpha = 0.3, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_boxplot(width  = 0.1) + geom_beeswarm(alpha = 0.3) +
# geom_jitter(shape=16, alpha = 0.3, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
ggplot(df_plot, aes(x = group, y = exprs)) +
geom_violin() + theme_pubr() +
geom_boxplot(width  = 0.1) +
geom_jitter(shape=16, alpha = 0.3, position=position_jitter(0.2)) +
xlab("") + ylab("Expression level") +
facet_grid(~gene,margins = "am", scales = "free") +
theme(strip.text.x = element_text(size=12, angle=0, face = "italic"),
strip.background = element_rect(colour="black", fill="white"))
mode(eset)
