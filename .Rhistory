theme(panel.spacing = panel.spacing)
ggplot(plot.data, aes(x = cell, y = 1, fill = patient)) + geom_tile() + theme_void() + #theme_classic() +
facet_grid(
facets = ~ident,
drop = TRUE,
space = "free",
scales = "free",
switch = 'x'
) +
theme(panel.spacing = panel.spacing#,
# axis.text.x = element_text(size = 3, angle = 90)
)
ggplot(plot.data, aes(x = cell, y = 1, fill = ident)) + geom_tile() + theme_void() +
facet_grid(
facets = ~ident,
drop = TRUE,
space = "free",
scales = "free",
switch = 'x'
) +
theme(panel.spacing = panel.spacing)
ggplot(plot.data, aes(x = cell, y = 1, fill = patient)) + geom_tile() + theme_void() + #theme_classic() +
facet_grid(
facets = ~ident,
drop = TRUE,
space = "free",
scales = "free",
switch = 'x'
) +
theme(panel.spacing = panel.spacing#,
# axis.text.x = element_text(size = 3, angle = 90)
)
secretory$clincluster_final  <- as.factor(secretory$clincluster_final)
share.7a3.1 <- c( "MKI67","PCNA","CDK4","CDC45",
"FANCD2","FANCI","MSH2","MSH6",
"RUVBL2","RUVBL1","HMGB2","SMC1A")
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C6","C8")],
share.7a3.1,
x = "clincluster_final", exprs_values = "logcounts", ncol = 4, xlab = "") +
scale_x_discrete(labels = list("C10"="CC","C3"="C3","C4"="KRT17","C8"="ECM")) +
theme(strip.text = element_text(face = "italic", size = 9))
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C6","C8")],
share.7a3.1,
x = "clincluster_final", exprs_values = "logcounts", ncol = 4, xlab = "") +
scale_x_discrete(labels = list("C10"="CC","C3"="C3","C4"="KRT17","C8"="ECM")) +
theme(strip.text = element_text(face = "italic", size = 9))
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C6","C8")],
share.7a3.1,
x = "clincluster_final", exprs_values = "normcounts",
ncol = 4, xlab = "") +
theme(strip.text = element_text(size = 10, face = "italic"))
secretory <- normalize(secretory)
assay(secretory, "normcounts") <- removeBatchEffect(assay(secretory, "normcounts"), covariates = secretory$total_features)
assay(secretory, "normcounts")[assay(secretory, "normcounts") <0] <- 0
sseC4_marker <- c("HLA-DQA1", "HLA-DPA1",# "HLA-DPB1",
"KRT17",  "KRT23",
"ALDH1A1", "ALDH3B2")
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C8")],
sseC4_marker,
x = "clincluster_final", exprs_values = "logcounts",
ncol = 2, xlab = "") + ylab("Scaled expression") +
theme(strip.text = element_text(size = 10, face = "italic"))
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C6","C8")],
sseC4_marker,
x = "clincluster_final", exprs_values = "logcounts",
ncol = 3, xlab = "") +
theme(strip.text = element_text(size = 10, face = "italic"))
secretory$type <- NA
secretory$type[secretory$clincluster_final == "C10"] <- "Cell cycle"
secretory$type[secretory$clincluster_final == "C3"] <- "Differentiated"
secretory$type[secretory$clincluster_final == "C4"] <- "KRT17"
secretory$type[secretory$clincluster_final == "C8"] <- "EMT"
secretory$type <- factor(secretory$type, levels = c("Cell cycle", "Differentiated", "KRT17","EMT"))
plotExpression(secretory[,secretory$clincluster_final %in% c("C10","C3","C4","C8")],
c("EPCAM","KRT7","SPARC","RGS16"),
x = "type", exprs_values = "logcounts",
ncol = 2, xlab = "") +
theme(strip.text = element_text(size = 10, face = "italic"),
axis.text.x = element_text(angle = 30, vjust = 0.7))
# ggsave("../../revision_analysis_20190827/revision_plots/main/Fig3a_marker_EMT_Epcam_KRT7.pdf", width = 6, height = 4, dpi = 300)
# ggsave("plots/SuppFig3_marker_EMT_Epcam_KRT7.png", width = 6, height = 4, dpi = 300)
plotPhenoData(secretory, x = "clincluster_final", y = "total_features" )  + geom_hline(yintercept = 7500, col  = "grey50") + geom_hline(yintercept = 1200, col = "grey50") + xlab("Clusters")
plotPhenoData(secretory, x = "clincluster_final", y = "total_features" )  + geom_hline(yintercept = 7500, col  = "grey50") + geom_hline(yintercept = 1200, col = "grey50") + xlab("Clusters")
sc16 <- readRDS("../../20190216scRNA-seq16/clean_data/sceset_sc16.rds")
stroma <- sc16[,logcounts(sc16)["EPCAM",] == 0 & logcounts(sc16)["PTPRC",] == 0]
# write.csv(as.data.frame(stroma@colData), "../GEO/sc16_colData.csv")
# write.table(counts(stroma), "../GEO/sc16_counts.txt", quote = F, sep = "\t")
dim(stroma)
matrix <- counts(secretory)[,secretory$clincluster_final == "C8"]
matrix <- cbind(matrix,counts(stroma)[match(rownames(matrix), rownames(stroma)),] )
matrix <- cpm(matrix)
dge <- edgeR::DGEList(counts = matrix[rowSums(matrix) > 5, ])
info <- c(rep("C8", 40), rep("str",91))
design <- model.matrix(~ 0 + info)
v <- voom(dge, design, plot = F)
fit <- lmFit(v, design) # Linear Model for Series of Arrays
cont.matrix <- makeContrasts(contrasts = "infoC8-infostr",levels=design)
fit <- contrasts.fit(fit, cont.matrix ) # Linear Model for Series of Arrays
fit <- eBayes(fit)
C8.m <- topTable(fit, p.value = 0.05, number = Inf, coef = 1, lfc = 0.6, sort.by = "logFC")
C8.m$gene <- rownames(C8.m)
which(markers2$gene[markers2$cluster == "C8"] %in% C8.m$gene[C8.m$logFC > 0])
matrix <- counts(secretory)[,secretory$clincluster_final == "C8"]
matrix <- cbind(matrix, counts(secretory)[,secretory$clincluster_final %in% c("C3","C4","C10")])
matrix <- cbind(matrix,counts(stroma)[match(rownames(matrix), rownames(stroma)),] )
info <- c(rep("C8",sum(secretory$clincluster_final == "C8")),
rep("secretory", sum(secretory$clincluster_final %in% c("C3","C4","C10"))),
rep("str",91))
matrix <- cpm(matrix)
dge <- edgeR::DGEList(counts = matrix[rowSums(matrix) > 5, ])
design <- model.matrix(~ 0 + info)
v <- voom(dge, design, plot = F)
fit <- lmFit(v, design) # Linear Model for Series of Arrays
cont.matrix <- makeContrasts(contrasts = c("infoC8-infosecretory","infostr-infosecretory","infostr-infoC8"),levels=design)
fit <- contrasts.fit(fit, cont.matrix) # Linear Model for Series of Arrays
fit <- eBayes(fit)
StrvsSec.m <- topTable(fit, p.value = 0.05, number = Inf, coef = 2, lfc = 0.6, sort.by = "logFC")
StrvsSec.m$gene <- rownames(StrvsSec.m)
C8vsSec.m <- topTable(fit, p.value = 0.05, number = Inf, coef = 1, lfc = 0.6, sort.by = "logFC")
C8vsSec.m$gene <- rownames(C8vsSec.m)
StrvsC8.m <- topTable(fit, p.value = 0.05, number = Inf, coef = 1, lfc = 0.6, sort.by = "logFC")
StrvsC8.m$gene <- rownames(StrvsC8.m)
stroma_control <- SingleCellExperiment(assays = list(counts = matrix ), colData = data.frame(Type = info))
logcounts(stroma_control) <- log1p(calculateCPM(stroma_control))
plotExpression(stroma_control, features = c(markers2$gene[markers2$cluster == "C8"][which(markers2$gene[markers2$cluster == "C8"] %in% C8.m$gene[C8.m$logFC > 0])]), x = "Type", ncol = 4, scales = "free")
plotExpression(stroma_control, features = c("COL1A2","COL3A1"), x = "Type", ncol = 2, scales = "free")  +
scale_x_discrete(labels = c("EMT","Other FTESCs","Stroma"),breaks = c("C8","secretory","str")) +
theme(strip.background = element_rect(fill = "white"),strip.text.x = element_text(face = "italic", size = 12))
# ggsave("plots/SuppFig3_EMT_stroma_col1a.png", height = 3, width = 5)
plotExpression(stroma_control, features = c("SPARC","RGS16","COL1A2","COL3A1","EPCAM","KRT7"),
x = "Type", ncol = 2, scales = "free") +
scale_x_discrete(labels = c("EMT","Other FTESCs","Stroma"),breaks = c("C8","secretory","str")) +
theme(strip.background = element_rect(fill = "white"),strip.text.x = element_text(face = "italic", size = 12))
# ggsave("plots/SuppFig3_EMT_markers_with_stroma_control.png", width = 6, height = 8)
plotExpression(stroma_control, features = c("SPARC","RGS16","COL1A2","COL3A1","EPCAM","KRT7"),
x = "Type", ncol = 2, scales = "free") +
scale_x_discrete(labels = c("EMT","Other FTESCs","Stroma"),breaks = c("C8","secretory","str")) +
theme(strip.background = element_rect(fill = "white"),strip.text.x = element_text(face = "italic", size = 12)) + geom_boxplot(width = 0.1)
fresh_seu <- Seurat::as.seurat(fresh)
fresh_seu <- Seurat::as.seurat(fresh)
fresh_seu <- Seurat::as.Seurat(fresh)
sc16_seu <- Seurat::as.Seurat(sc16)
sc16_seu@meta.data$Source <- "Fresh"
fresh_seu@meta.data <- fresh_seu@meta.data[,colnames(fresh_seu@meta.data) %in% colnames(sc16_seu@meta.data)]
sc16_seu@meta.data <- sc16_seu@meta.data[,match(colnames(fresh_seu@meta.data), colnames(sc16_seu@meta.data))]
fresh_seu@meta.data <- fresh_seu@meta.data [,c(1,2,3,4,5,21)]
sc16_seu@meta.data <- sc16_seu@meta.data [,c(1,2,3,4,5,21)]
seurat <- Seurat::MergeSeurat(object1 = fresh_seu, object2 =  sc16_seu)
seurat <- Seurat::merge(object1 = fresh_seu, object2 =  sc16_seu)
seurat <- merge(fresh_seu, y = sc16_seu)
rm(fresh_seu, sc16_seu)
seurat <- FindVariableGenes(seurat)
library(Seurat)
seurat <- FindVariableGenes(seurat)
seurat <- FindVariableFeatures(seurat)
seurat <- ScaleData(seurat)
seurat <- RunPCA(seurat, pc.genes =  seurat@var.genes)
fresh2 <- as.SingleCellExperiment(seurat)
set.seed(12334);fresh2 <- runTSNE(fresh2)
set.seed(12334);fresh2 <- runTSNE(fresh2)
plotTSNE(fresh2, colour_by  = "PTPRC")
rm(fresh2)
library(DoubletFinder)
knitr::opts_chunk$set(echo = TRUE, echo = FALSE)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
library(DoubletFinder)
seurat <- NormalizeData(seurat)
seurat <- FindVariableGenes(seurat, x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot=FALSE)
seurat <- FindVariableFeatures(seurat, x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot=FALSE)
seurat <- ScaleData(object = seurat, genes.use = seurat@var.genes)
seurat <- ScaleData(object = seurat, genes.use = seurat@var.genes)
seurat <- RunPCA(seurat, pc.genes = seurat@var.genes, pcs.print = 0)
seurat <- FindClusters(object = seurat, reduction.type = "pca", dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
seurat <- FindClusters(object = seurat, dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
?FindClusters
seurat <- FindClusters(object = seurat, dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
seurat <- FindClusters(object = seurat, dims.use = 1:10, graph.name = "pca",
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
seurat <- FindClusters(object = seurat, dims.use = 1:10, graph.name = "PCA",
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
seurat <- FindClusters(object = seurat, dims.use = 1:10,
resolution = 0.3)
seurat <- FindClusters(object = seurat,
resolution = 0.3)
seurat <- FindNeighbors(seurat, dims = 1:10)
seurat <- FindClusters(object = seurat, resolution = 0.3)
TSNEPlot(object = seurat)
## pK Identification -
sweep.res.list <- paramSweep(seurat, PCs = 1:10)
## pK Identification -
sweep.res.list <- paramSweep_v3(seurat, PCs = 1:10)
## Plot results
seurat@meta.data$DF_hi.lo <- seurat@meta.data$DF.classifications_0.25_0.07_25
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet" & seurat@meta.data$DF.classifications_0.25_0.07_21 == "Singlet")] <- "Doublet_lo"
bcmvn
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats) #0.07
bcmvn
annotations <- seurat@ident
seurat@active.ident
## Homotypic Doublet Proportion Estimate
annotations <- seurat@active.ident
homotypic.prop <- modelHomotypic(annotations)           ## ex: annotations <- seu_kidney@meta.data$ClusteringResults
nExp_poi <- round(0.01*length(seurat@cell.names))  ## 1% based on 2000 cells
nExp_poi <- round(0.01*length(ncol(seurat)))  ## 1% based on 2000 cells
nExp_poi.adj <- round(nExp_poi*(1-homotypic.prop))
## Run DoubletFinder with varying classification stringencies
seurat <- doubletFinder_v3(seurat, PCs = 1:10, pN = 0.25, pK = 0.07, nExp = nExp_poi, reuse.pANN = FALSE)
devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
# devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat) # 2.3.4
detach("package:Seurat", unload=TRUE)
# devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat) # 2.3.4
fresh_seu <- Seurat::as.seurat(fresh)
sc16_seu <- Seurat::as.seurat(sc16)
sc16_seu@meta.data$Source <- "Fresh"
fresh_seu@meta.data <- fresh_seu@meta.data[,colnames(fresh_seu@meta.data) %in% colnames(sc16_seu@meta.data)]
sc16_seu@meta.data <- sc16_seu@meta.data[,match(colnames(fresh_seu@meta.data), colnames(sc16_seu@meta.data))]
fresh_seu@meta.data <- fresh_seu@meta.data [,c(1,2,3,4,5,21)]
sc16_seu@meta.data <- sc16_seu@meta.data [,c(1,2,3,4,5,21)]
seurat <- MergeSeurat(fresh_seu, sc16_seu)
rm(fresh_seu, sc16_seu)
seurat <- NormalizeData(seurat)
seurat <- FindVariableGenes(seurat, x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot=FALSE)
seurat <- ScaleData(object = seurat, genes.use = seurat@var.genes)
seurat <- RunPCA(seurat, pc.genes = seurat@var.genes, pcs.print = 0)
seurat <- RunTSNE(seurat, dims.use = 1:10, verbose=TRUE)
DimElbowPlot(seurat)
seurat <- FindClusters(object = seurat, reduction.type = "pca", dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
sweep.res.list <- paramSweep(seurat, PCs = 1:10)
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats) #0.07
bcmvn <- find.pK(sweep.stats) #0.07
head(bcmvn)
knitr::kable(bcmvn)
fresh_seu <- Seurat::as.seurat(fresh)
sc16_seu <- Seurat::as.seurat(sc16)
sc16_seu@meta.data$Source <- "Fresh"
fresh_seu@meta.data <- fresh_seu@meta.data[,colnames(fresh_seu@meta.data) %in% colnames(sc16_seu@meta.data)]
sc16_seu@meta.data <- sc16_seu@meta.data[,match(colnames(fresh_seu@meta.data), colnames(sc16_seu@meta.data))]
fresh_seu@meta.data <- fresh_seu@meta.data [,c(1,2,3,4,5,21)]
sc16_seu@meta.data <- sc16_seu@meta.data [,c(1,2,3,4,5,21)]
seurat <- MergeSeurat(fresh_seu, sc16_seu)
rm(fresh_seu, sc16_seu)
seurat <- FindVariableGenes(seurat)
seurat <- ScaleData(seurat)
seurat <- RunPCA(seurat, pc.genes =  seurat@var.genes)
seurat <- NormalizeData(seurat)
seurat <- FindVariableGenes(seurat, x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot=FALSE)
seurat <- ScaleData(object = seurat, genes.use = seurat@var.genes)
seurat <- RunPCA(seurat, pc.genes = seurat@var.genes, pcs.print = 0)
seurat <- RunTSNE(seurat, dims.use = 1:10, verbose=TRUE)
DimElbowPlot(seurat)
seurat <- FindClusters(object = seurat, reduction.type = "pca", dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
# TSNEPlot(object = seurat)
## pK Identification
sweep.res.list <- paramSweep(seurat, PCs = 1:10)
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats) #0.07
knitr::kable(bcmvn)
sweep.res.list <- paramSweep(seurat, PCs = 1:10)
fresh_seu <- Seurat::as.seurat(fresh)
sc16_seu <- Seurat::as.seurat(sc16)
sc16_seu@meta.data$Source <- "Fresh"
fresh_seu@meta.data <- fresh_seu@meta.data[,colnames(fresh_seu@meta.data) %in% colnames(sc16_seu@meta.data)]
sc16_seu@meta.data <- sc16_seu@meta.data[,match(colnames(fresh_seu@meta.data), colnames(sc16_seu@meta.data))]
fresh_seu@meta.data <- fresh_seu@meta.data [,c(1,2,3,4,5,21)]
sc16_seu@meta.data <- sc16_seu@meta.data [,c(1,2,3,4,5,21)]
seurat <- MergeSeurat(fresh_seu, sc16_seu)
rm(fresh_seu, sc16_seu)
seurat <- FindVariableGenes(seurat)
seurat <- ScaleData(seurat)
seurat <- RunPCA(seurat, pc.genes =  seurat@var.genes)
set.seed(12334)
seurat <- NormalizeData(seurat)
seurat <- FindVariableGenes(seurat, x.low.cutoff = 0.0125, y.cutoff = 0.25, do.plot=FALSE)
seurat <- ScaleData(object = seurat, genes.use = seurat@var.genes)
seurat <- RunPCA(seurat, pc.genes = seurat@var.genes, pcs.print = 0)
seurat <- RunTSNE(seurat, dims.use = 1:10, verbose=TRUE)
DimElbowPlot(seurat)
seurat <- FindClusters(object = seurat, reduction.type = "pca", dims.use = 1:10,
resolution = 0.3, print.output = 0, save.SNN = TRUE, force.recalc = T)
# TSNEPlot(object = seurat)
## pK Identification
sweep.res.list <- paramSweep(seurat, PCs = 1:10)
sweep.stats <- summarizeSweep(sweep.res.list, GT = FALSE)
bcmvn <- find.pK(sweep.stats) #0.07
knitr::kable(bcmvn)
knitr::opts_chunk$set(echo = TRUE, cache = F, fig.width = 8)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
sceset <- readRDS("../../scFT-paper_rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds")
# load("../RData/20180725_allFT_Clincluster_12clusters.RData")
# saveRDS(sceset, "../rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds", compress = T)
# write.csv(as.data.frame(sceset@colData), "../GEO/sceset_colData.csv")
# write.table(counts(sceset), "../GEO/sceset_counts.txt", quote = F, sep = "\t")
dim(sceset)
plotTSNE(sceset, colour_by = "final.clusters")
# UMAP
# too very long time to run
# set.seed(1234)
# sceset <- runUMAP(sceset, ncomponents = 2, feature_set = rowData(sceset)$high.var == T,
#   exprs_values = "logcounts", scale_features = TRUE)
# plotUMAP(sceset, colour_by = "Patient2") + xlab("UMAP_1") + ylab("UMAP_2")
plotUMAP(sceset, colour_by = "final.clusters") + xlab("UMAP_1") + ylab("UMAP_2")
p1 <- plotUMAP(sceset[,sceset$source == "Fresh"], colour_by = "Patient") + xlab("UMAP_1") + ylab("UMAP_2")
p2 <- plotUMAP(sceset[,sceset$source == "Fresh"], colour_by = "EPCAM") + xlab("UMAP_1") + ylab("UMAP_2")
p3 <- plotUMAP(sceset[,sceset$source == "Fresh"], colour_by = "KRT7") + xlab("UMAP_1") + ylab("UMAP_2")
cowplot::plot_grid(p1,p2, p3, ncol = 3)
# ggsave("plots/Fig1_UMAP_EPCAMandKRT7_fresh_20190510.png", width = 11, height = 2.6)
p1 <- plotPCA(sceset[,sceset$source == "Fresh" & sceset$Patient != "15066L"], colour_by = "KRT7") + xlab("PC1") + ylab("PC2")
p2 <- plotPCA(sceset[,sceset$source == "Fresh" & sceset$Patient != "15066L"], colour_by = "PAX8") + xlab("PC1") + ylab("PC2")
p3 <- plotPCA(sceset[,sceset$source == "Fresh" & sceset$Patient != "15066L"], colour_by = "CCDC17") + xlab("PC1") + ylab("PC2")
p4 <- plotPCA(sceset[,sceset$source == "Fresh" & sceset$Patient != "15066L"], colour_by = "CAPS") + xlab("PC1") + ylab("PC2")
cowplot::plot_grid(p1,p2,p3,p4)
# ggsave("plots/SuppFig2_intermediate_PCAs.png")
## select the fresh secretory cells
secretory <- sceset[,sceset$final.clusters %in% c(8,9,10) & sceset$source == "Fresh" & sceset$Patient != "15066L"] # dim(secretory)
# [1] 22110  1747
secretory <- secretory[   ,logcounts(secretory)["KRT7",] > 2 &
logcounts(secretory)["EPCAM",] > 2 &
logcounts(secretory)["PTPRC",] == 0 &
logcounts(secretory)["CCDC17",] < 1 ]
dim(secretory)
# [1] 22110  1410
## not run
# ciliated  <- sceset[,sceset$final.clusters %in% c(11) & sceset$source == "Fresh" & sceset$Patient != "15066L"]
# ciliated <- ciliated[   ,logcounts(ciliated)["KRT7",] <= 2 &
#                          logcounts(ciliated)["EPCAM",] > 2 &
#                          logcounts(ciliated)["PTPRC",] == 0 &
#                          logcounts(ciliated)["CCDC17",] >= 1 ]
# dim(ciliated)
# matrix <- expm1(cbind(logcounts(secretory), logcounts(ciliated)))
# keep <- rowSums(matrix > 1) > 5
# sum(keep)
#
# dge <- edgeR::DGEList(counts = matrix[keep,]) # make a edgeR object
# rm(matrix,keep)
# group <- c(rep("SC",1410), rep("CC", 91))
# patient <- c(secretory$Patient2, ciliated$Patient2)
# design <- model.matrix(~ 0+group + patient)
# v <- voom(dge, design, plot = TRUE)
# fit <- lmFit(v, design)
#
# cont.matrix <- makeContrasts(contrasts = "groupSC-groupCC",levels=colnames(design))
# fit <- contrasts.fit(fit, cont.matrix)
# fit <- eBayes(fit)
#
# rls <- topTable(fit, n = Inf, coef = 1, sort = "logFC", lfc = 1, p = 0.05 )
# rls$gene <- rownames(rls)
#
# write.csv(rls, "../tables/TableS4_markers_secretory_ciliated20190214.csv", row.names = F)
source("clincluster/clincluster_functions.R")
secretory <- PrepareData(secretory, col.for.cluster = "Patient2", do.scale = T)
secretory <- HighVarGenes(secretory)
table(rowData(secretory)$high.var)
# FALSE  TRUE
# 19721  2389
ggplot(data = data.frame(gene.mean = rowData(secretory)$gene.mean,
gene.dispersion = rowData(secretory)$gene.dispersion,
high.var = rowData(secretory)$high.var),
aes(x = gene.mean, y = gene.dispersion, col = high.var) ) +
geom_point(alpha=0.4)
set.seed(1234)
secretory <- runTSNE(object = secretory, ncomponents = 2,
feature_set = rownames(secretory)[rowData(secretory)$high.var],
exprs_values = "logcounts",
perplexity = min(50, floor(ncol(secretory)/5)))
set.seed(12345)
secretory <- runPCA(object = secretory, ncomponents = 20,
exprs_values = "logcounts", rand_seed = 12345,
feature_set = rownames(secretory)[rowData(secretory)$high.var == TRUE])
plotPCA(secretory)
plot(1:50, (attr(secretory@reducedDims$PCA, "percentVar")[1:50])*100, pch = 20, xlab = "PC", ylab = "Standard Deviation of PC")
set.seed(123456)
secretory <- InitialCluster(secretory, k = c(4,6,6,6,6), ncomponents = 1:12, n.neighbor = 7, spec.method = "kknn")
seurat <- readRDS("../../scFT-paper_rds/20190508Seurat_all_fresh_doublefinder.rds")
## Plot results
seurat@meta.data$DF_hi.lo <- seurat@meta.data$DF.classifications_0.25_0.07_25
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet" & seurat@meta.data$DF.classifications_0.25_0.07_21 == "Singlet")] <- "Doublet_lo"
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet")] <- "Doublet_hi"
TSNEPlot(seurat, group.by="DF_hi.lo", plot.order=c("Doublet_hi","Doublet_lo","Singlet"), colors.use=c("black","gold","red"))
seurat@meta.data$cell_type <- NA
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
knitr::opts_chunk$set(echo = TRUE, cache = F, fig.width = 8)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
sceset <- readRDS("../../scFT-paper_rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds")
plotUMAP(sceset, colour_by = "final.clusters") + xlab("UMAP_1") + ylab("UMAP_2")
source("clincluster/clincluster_functions.R")
secretory <- PrepareData(secretory, col.for.cluster = "Patient2", do.scale = T)
secretory <- HighVarGenes(secretory)
table(rowData(secretory)$high.var)
# FALSE  TRUE
# 19721  2389
knitr::opts_chunk$set(echo = TRUE, cache = F, fig.width = 8)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
library(DoubletFinder) # 2.0.1
# devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat) # 2.3.4
set.seed(12345)
secretory <- runPCA(object = secretory, ncomponents = 20,
exprs_values = "logcounts", rand_seed = 12345,
feature_set = rownames(secretory)[rowData(secretory)$high.var == TRUE])
set.seed(123456)
secretory <- InitialCluster(secretory, k = c(4,6,6,6,6), ncomponents = 1:12, n.neighbor = 7, spec.method = "kknn")
seurat <- readRDS("../../scFT-paper_rds/20190508Seurat_all_fresh_doublefinder.rds")
seurat@meta.data$DF_hi.lo <- seurat@meta.data$DF.classifications_0.25_0.07_25
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet" & seurat@meta.data$DF.classifications_0.25_0.07_21 == "Singlet")] <- "Doublet_lo"
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet")] <- "Doublet_hi"
TSNEPlot(seurat, group.by="DF_hi.lo", plot.order=c("Doublet_hi","Doublet_lo","Singlet"), colors.use=c("black","gold","red"))
seurat@meta.data$cell_type <- NA
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
fresh <- sceset[,sceset$source == "Fresh"]
sceset <- readRDS("../../scFT-paper_rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds")
# load("../RData/20180725_allFT_Clincluster_12clusters.RData")
# saveRDS(sceset, "../rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds", compress = T)
# write.csv(as.data.frame(sceset@colData), "../GEO/sceset_colData.csv")
# write.table(counts(sceset), "../GEO/sceset_counts.txt", quote = F, sep = "\t")
dim(sceset)
fresh <- sceset[,sceset$source == "Fresh"]
fresh$cell_type <- NA
fresh$cell_type[colnames(fresh) %in% colnames(sceset)[sceset$final.clusters == 11]] <- "Ciliated"
fresh$cell_type[colnames(fresh) %in% colnames(secretory)] <- "Secretory"
secretory <- readRDS("../../scFT-paper_rds/20190120Fresh_secretory_9clusters_clincluster.rds")
getwd()
knitr::opts_chunk$set(echo = TRUE, echo = FALSE)
library(SingleCellExperiment) #1.4.1
secretory <- readRDS("../../scFT-paper_rds/20190120Fresh_secretory_9clusters_clincluster.rds")
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
library(DoubletFinder) # 2.0.1
# devtools::install_version(package = 'Seurat', version = package_version('2.3.4'))
library(Seurat) # 2.3.4
sceset <- readRDS("../../scFT-paper_rds/20190214_allFT_Clincluster_12clusters_sceset_withUMAP.rds")
knitr::opts_chunk$set(echo = TRUE, cache = F, fig.width = 8)
library(SingleCellExperiment) #1.4.1
library(scater)#1.10.1
library(edgeR) #3.24.3
library(limma) #3.38.3
library(dplyr) #0.7.8
library(scales)
library(reshape2)
seurat <- readRDS("../../scFT-paper_rds/20190508Seurat_all_fresh_doublefinder.rds")
seurat@meta.data$DF_hi.lo <- seurat@meta.data$DF.classifications_0.25_0.07_25
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet" & seurat@meta.data$DF.classifications_0.25_0.07_21 == "Singlet")] <- "Doublet_lo"
seurat@meta.data$DF_hi.lo[which(seurat@meta.data$DF_hi.lo == "Doublet")] <- "Doublet_hi"
TSNEPlot(seurat, group.by="DF_hi.lo", plot.order=c("Doublet_hi","Doublet_lo","Singlet"), colors.use=c("black","gold","red"))
seurat@meta.data$cell_type <- NA
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
fresh <- sceset[,sceset$source == "Fresh"]
fresh$cell_type <- NA
fresh$cell_type[colnames(fresh) %in% colnames(sceset)[sceset$final.clusters == 11]] <- "Ciliated"
fresh$cell_type[colnames(fresh) %in% colnames(secretory)] <- "Secretory"
table(fresh$cell_type)
seurat@meta.data$cell_type <- fresh$cell_type[match(rownames(seurat@meta.data), colnames(fresh))]
seurat@meta.data$cell_subtype <- secretory$cell_type[match(rownames(seurat@meta.data), colnames(secretory))]
table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
seurat@meta.data$DF_hi.lo
rownames(seurat@meta.data)
match(rownames(seurat@meta.data), colnames(secretory))
seurat@meta.data$cell_subtype <- secretory$cell_type[match(rownames(seurat@meta.data), colnames(secretory))]
table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
# table(seurat@meta.data$cell_subtype, seurat@meta.data$DF_hi.lo)
secretory$DF_hi.lo <- seurat@meta.data$DF_hi.lo[match(colnames(secretory), rownames(seurat@meta.data))]
table(secretory$DF_hi.lo, secretory$cell_type)
length(secretory$DF_hi.lo)
length(secretory$cell_type)
secretory$clincluster_final
table(secretory$DF_hi.lo, secretory$clincluster_final)
knitr::kable(table(secretory$DF_hi.lo, secretory$clincluster_final))
knitr::kable(table(secretory$DF_hi.lo[secretory$clincluster_final == "C8"]))
plotTSNE(fresh)
fresh$cell_type
table(fresh$cell_type)
plotTSNE(as.SingleCellExperiment(seurat))
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "cell_subtype")
seurat@meta.data$cell_subtype <- secretory$clincluster_final[match(rownames(seurat@meta.data), colnames(secretory))]
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "cell_subtype")
plotTSNE(as.SingleCellExperiment(seurat), colour_by = "batch")
